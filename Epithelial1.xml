<CompuCell3D Revision="20180621" Version="3.7.8">
   
   <Potts>      
      <LatticeType>Hexagonal</LatticeType> <!-- To enable hexagonal lattice. With hexagonal lattice, pixels are hexagons.-->
<!--       <Dimensions x="1500" y="170" z="1"/>  -->
      <Dimensions x="1500" y="320" z="1"/> 
<!--       <Dimensions x="1500" y="620" z="1"/>  -->
      <Steps>2100</Steps>      
      <Temperature>50</Temperature>      
      <NeighborOrder>2</NeighborOrder>      
      <Boundary_y>no-flux</Boundary_y>
      <Boundary_x>no-flux</Boundary_x>      
      <EnergyFunctionCalculator Type="Statistics"> <!-- to output statistical data from the simulation for further analysis.-->
      <OutputFileName Frequency="100">StatEpithelial1.txt</OutputFileName> <!-- to specify the name of the file to which CompuCell3D
                                                                    will write average changes in energies returned by each 
                                                                    plugins with corresponding standard deviations for those 
                                                                    MCS whose values are divisible by the Frequency argument. 
                                                                    Here it will write these data every 100 MCS.-->
      <OutputCoreFileNameSpinFlips 
      Frequency="100"           
      GatherResults="" 
      OutputAccepted="" 
      OutputRejected="" 
      OutputTotal=""> <!--
                      OutputCoreFileNameSpinFlips: to write average changes in energies returned by each plugin.
                      GatherResults=”” will ensure that there is only one file written for accepted (OutputAccepted), 
                      rejected (OutputRejected)and accepted and rejected (OutputTotal) pixel copies. 
                      If you will not specify GatherResults CompuCell3D will output separate files for different MCS's 
                      and depending on the Frequency you may end up with many files in your directory.-->                      
      statDataSingleFlip
      </OutputCoreFileNameSpinFlips>
      </EnergyFunctionCalculator>      
   </Potts>
   
   <!-- 
   The Freeze=”” attribute excludes cells of type Wall from participating in index copies, which makes the wall cells immobile.
   -->   
   <Plugin Name="CellType">      
      <!-- Listing all cell types in the simulation -->
      <CellType TypeId="0" TypeName="Medium"/>
      <CellType TypeId="1" TypeName="Polarized"/>
      <CellType TypeId="2" TypeName="Unpolarized"/> 
      <CellType TypeId="3" TypeName="Wall" Freeze=""/>
      <CellType TypeId="4" TypeName="Barrier" Freeze=""/>
   </Plugin>
   
   <!--
  In the old version, the first line is: <Plugin Name="VolumeFlex">.
  Initially cells are always square (even with "UniformInitializer"). 
  Since I have declared hexagonal lattice type, pixels of the cells are always hexagonal.
  So, initial area of the 5*5 cells is equal to 25. 
  So, I assign Vt = 25: at time zero, the area ealsticity has no effect on the energy (i.e. no effect on starting the motility).  
   -->
   <!--Plugin Name="Volume"> 
      <VolumeEnergyParameters CellType="Polarized" LambdaVolume="70" TargetVolume="100"/> 
      <VolumeEnergyParameters CellType="Unpolarized" LambdaVolume="70" TargetVolume="100"/> 
   </Plugin -->   
   
   <Plugin Name="Volume"/>
  
   <!--
   LambdaSurface:
   thershold is between 0.1 and 1. For (LambdaSurface > threshold) cells shape (hexagons) will not change (very stiff shapes). 
                                   For (LambdaSurface < threshold) cells shape (hexagons) will change (soft shapes). 
   For (LambdaSurface >> threshold): the hexagonal cells will not change (very stiff) and active motility force will not have effect.
   So, we put LambdaSurface close to threshold to see the dynamics due to polarity force.   
   -->
   <Plugin Name="Surface">
      <SurfaceEnergyParameters CellType="Polarized" TargetSurface="0" LambdaSurface="3"/>
      <SurfaceEnergyParameters CellType="Unpolarized" TargetSurface="0" LambdaSurface="3"/> 
   </Plugin>


   <!-- 
   To have the contribution of "elactity" in the energy calculation: I must specify which cell types participate in the elasticity = plasticity calculations.
   This is done by including "ElasticityTracker" plugin before (must be before) "Elasticity" plugin in the CC3DML file.
   Here cells of type Polarized and Unpolarized will be taken into account for elasticity energy calculation purposes (p. 37, part 2). 
   Plugin "ElasticityEnergy": puts constraints for the distance between cells’ center of masses.
   Local: defines lamda and Lt on per pair of cells basis (p. 39 part 2).
   Lt = "TargetLengthElasticity": Target distance between center of masses of cells neighboring cells i and j.
   -->     
   <!-- <Plugin Name="ElasticityTracker">
      <IncludeType>Polarized</IncludeType>
      <IncludeType>Unpolarized</IncludeType>
    </Plugin>     
   <Plugin Name="ElasticityEnergy"> 
      <Local/>
      <LambdaElasticity>200.0</LambdaElasticity>
      <TargetLengthElasticity>15</TargetLengthElasticity> 
   </Plugin> --> 
   
   <!-- 
   Similar to "Elasticity" plugin: "FocalPointPlasticity" puts constraints for the distance between cells’ center of masses (p. 40, part 2).
   The main difference is: the list of “focal point plasticity neighbors” can change as the simulation goes and user specifies the maximum number of 
                          “focal point plasticity neighbors” a given cell can have.
   "MaxDistance" = the distance between cells’ COMs when the link between those cells breaks. When the link breaks, in order for the two cells to reconnect,
   they would need to come in contact again (in order to reconnect). However, it is usually more likely that there will be other cells in the vicinity of 
   separated cells. So, it is more likely to establish new link than restoring the broken one.   
   "ActivationEnergy": is added to overall energy in order to increase the odds of pixel copy which would lead to new connection.
   "MaxNumberOfJunctions": max number of connections that a cell can have (e.g. Polarised cells can have up to 4 connections with Unpolarised cells, and 
                                                                                                         up to 4 connections with Polarised cells).
   "NeighborOrder" = 2nd nearest pixel neighbors will be visited for pixel-copy.
   -->
   <!--
   <Plugin Name="FocalPointPlasticity">
      <Local/>
      <Parameters Type1="Polarized" Type2="Polarized">
      <Lambda>10.0</Lambda>
      <TargetDistance>6</TargetDistance>
      <MaxDistance>8</MaxDistance>
      <ActivationEnergy>-1000</ActivationEnergy>
      <MaxNumberOfJunctions>6</MaxNumberOfJunctions>
      </Parameters>      
      <Parameters Type1="Polarized" Type2="Unpolarized">
      <Lambda>10.0</Lambda>
      <ActivationEnergy>-1000</ActivationEnergy>
      <TargetDistance>6</TargetDistance>
      <MaxDistance>8</MaxDistance>
      <MaxNumberOfJunctions>6</MaxNumberOfJunctions>
      </Parameters>
      <Parameters Type1="Unpolarized" Type2="Unpolarized">
      <Lambda>10.0</Lambda>
      <ActivationEnergy>-1000</ActivationEnergy>
      <TargetDistance>6</TargetDistance>
      <MaxDistance>8</MaxDistance>
      <MaxNumberOfJunctions>6</MaxNumberOfJunctions>
      </Parameters>
   <NeighborOrder>2</NeighborOrder>
   </Plugin>
   -->
   
   <Plugin Name="CenterOfMass">      
      <!-- Module tracking center of mass of each cell -->
   </Plugin>
   
   <!--
   Low contact energy = P cells are adhisive = like to stay attached due to low energy.
   High Contact energy = M and P cells are highly repulsive = adhere weakly.
   
   Two seperate cells:
   With any Contact energy, the polarised cell moves only.
   
   Two joint cells:
   With (cell-cell contact energy >= 30) and (cell-medium contact energy = 0): the polarised cell moves only.
   With (cell-cell contact energy < 30) and (cell-medium contact energy = 0): both cells move.
   
   The default contact energy between any cell type and the edge of the cell lattice is zero [Book-SysBiol].
   Wall:  we define a surrounding wall to prevent cells from sticking to the cell-lattice boundary.
   
   -->
   <Plugin Name="Contact">
      <Energy Type1="Medium" Type2="Medium">0</Energy>
      <Energy Type1="Medium" Type2="Polarized">0</Energy> 
      <Energy Type1="Medium" Type2="Unpolarized">0</Energy>  
      <Energy Type1="Polarized" Type2="Polarized">-2</Energy> 
      <Energy Type1="Polarized" Type2="Unpolarized">-2</Energy> 
      <Energy Type1="Unpolarized" Type2="Unpolarized">-2</Energy> 
      <Energy Type1="Wall" Type2="Wall">0</Energy>
      <Energy Type1="Wall" Type2="Medium">0</Energy>
      <Energy Type1="Wall" Type2="Polarized">0</Energy>
      <Energy Type1="Wall" Type2="Unpolarized">0</Energy>  
      <Energy Type1="Barrier" Type2="Barrier">0</Energy>
      <Energy Type1="Barrier" Type2="Wall">0</Energy>
      <Energy Type1="Barrier" Type2="Medium">0</Energy>
      <Energy Type1="Barrier" Type2="Polarized">0</Energy>
      <Energy Type1="Barrier" Type2="Unpolarized">0</Energy>   
      <NeighborOrder>2</NeighborOrder>
   </Plugin>      

<!-- <Plugin Name="ContactLocalProduct"> -->
<!-- <Local/> -->
<!-- <ContactSpecificity Type1="Medium" Type2="Medium">0</ContactSpecificity> -->
<!-- <ContactSpecificity Type1="Medium" Type2="Wall">0</ContactSpecificity> -->
<!-- <ContactSpecificity Type1="Medium" Type2="Barrier">0</ContactSpecificity> -->
<!-- <ContactSpecificity Type1="Medium" Type2="Polarized">0</ContactSpecificity> -->
<!-- <ContactSpecificity Type1="Medium" Type2="Unpolarized">0</ContactSpecificity> -->
<!-- <ContactSpecificity Type1="Polarized" Type2="Polarized">-18</ContactSpecificity> -->
<!-- <ContactSpecificity Type1="Polarized" Type2="Unpolarized">-18</ContactSpecificity> -->
<!-- <ContactSpecificity Type1="Unpolarized" Type2="Unpolarized">-18</ContactSpecificity> -->
<!-- <ContactSpecificity Type1="Wall" Type2="Wall">0</ContactSpecificity> -->
<!-- <ContactSpecificity Type1="Wall" Type2="Barrier">0</ContactSpecificity> -->
<!-- <ContactSpecificity Type1="Wall" Type2="Polarized">0</ContactSpecificity> -->
<!-- <ContactSpecificity Type1="Wall" Type2="Unpolarized">0</ContactSpecificity> -->
<!-- <ContactSpecificity Type1="Barrier" Type2="Barrier">0</ContactSpecificity> -->
<!-- <ContactSpecificity Type1="Barrier" Type2="Polarized">0</ContactSpecificity> -->
<!-- <ContactSpecificity Type1="Barrier" Type2="Unpolarized">0</ContactSpecificity> -->
<!-- <ContactFunctionType>Linear</ContactFunctionType> -->
<!-- <EnergyOffset>0.0</EnergyOffset> -->
<!-- <NeighborOrder>2</NeighborOrder> -->
<!-- </Plugin> -->
   
<!-- FocalPointPlasticity plugin represents adhesion junctions by mechanically connecting the centers-of-mass of cells using a breakable linear spring. 
     Here, EC-EC links (Lambda = 400) are stronger than EC-NV links (Lambda = 50) which are, in turn, stronger than NV-NV links (Lambda = 20). -->
<!-- FocalPointPlasticity pust constrains the distance between cells’ center of masses. The list of “focal point plasticity neighbors” can change as the simulation goes, and 
     user specifies the maximum number of “focal point plasticity neighbors” a given cell can have. -->
<!-- Parameters describes properties of links between cells (are responsible for establishing connections between cells):
Lambda: strength of connection between cells.
ActivationEnergy: is added to overall energy in order to increase the odds of pixel copy which would lead to new connection.
TargetDistance: target distance between cell centers.
MaxDistance: determines the distance between cells’ center of masses when the link between those cells break. 
MaxNumberOfJunctions: cell types can have up to MaxNumberOfJunctions connections.
NeighborOrder: determines the pixel vicinity of the pixel that is about to be overwritten which CC3D will scan in search of the new link between cells.
 -->
   
<!--    <Plugin Name="FocalPointPlasticity"> -->
<!--       <Local/> -->
<!--       <Parameters Type1="Polarized" Type2="Polarized"> -->
<!--       <Lambda>50</Lambda> -->
<!--       <ActivationEnergy>-1000</ActivationEnergy> -->
<!--       <TargetDistance>10</TargetDistance> -->
<!--       <MaxDistance>20</MaxDistance> -->
<!--       <MaxNumberOfJunctions>6</MaxNumberOfJunctions> -->
<!--       </Parameters> -->
      
<!--       <Parameters Type1="Polarized" Type2="Unpolarized"> -->
<!--       <Lambda>50</Lambda> -->
<!--       <ActivationEnergy>-1000</ActivationEnergy> -->
<!--       <TargetDistance>10</TargetDistance> -->
<!--       <MaxDistance>20</MaxDistance> -->
<!--       <MaxNumberOfJunctions>6</MaxNumberOfJunctions> -->
<!--       </Parameters> -->
      
<!--       <Parameters Type1="Unpolarized" Type2="Unpolarized"> -->
<!--       <Lambda>50</Lambda> -->
<!--       <ActivationEnergy>-1000</ActivationEnergy> -->
<!--       <TargetDistance>10</TargetDistance> -->
<!--       <MaxDistance>20</MaxDistance> -->
<!--       <MaxNumberOfJunctions>6</MaxNumberOfJunctions> -->
<!--       </Parameters> -->
<!--    <NeighborOrder>1</NeighborOrder> -->
<!--    </Plugin> -->
      
   <!-- ConnectivityGlobal plugin slows down the simulation. -->
   <Plugin Name="ConnectivityGlobal">
      <Penalty Type="Polarized">1000000000</Penalty>
      <Penalty Type="Unpolarized">1000000000</Penalty> 
   </Plugin>
   
   <!--In deleting a cell: I have to add PixelTracker Plugin to CC3DML.-->
   <Plugin Name="PixelTracker"/>
   <!--In finding cells at the edge: I have to add NeighborTracker to CC3DML.-->
   <Plugin Name="NeighborTracker"/>
   <!--For calculating eccentricity of cells: I have to add MomentOfInertia to CC3DML.-->
   <Plugin Name="MomentOfInertia"/>
   
   <Plugin Name="ExternalPotential">
      <!-- 
      This plugin is imposes directed pressure (or force) on cells.      
      To apply external potential (i.e. force) to individual cells, in the CC3DML section we specify the pluging and leave it empty (i.e. do not assign value to lamda).
      Then, in the Steppable.py file we change lambdaVecX, lambdaVecY, lambdaVecZ, which are properties of cells. 
      Positive component of Lambda vector pushes cell in the negative direction and negative component pushes cell in the positive direction.(p. 19-20 Part2).
      -->           
       <!-- 
       <ExternalPotentialParameters CellType="Type1" x="-10" y="0" z="0"/>
       <ExternalPotentialParameters CellType="Type2" x="0" y="0" z="0"/>   
       --> 
       <!--  -->    
      <!-- External force applied to cell. Each cell has different force and force components have to be managed in Python. -->
      <!-- e.g. cell.lambdaVecX=0.5; cell.lambdaVecY=0.1 ; cell.lambdaVecZ=0.3; -->
      <Algorithm>PixelBased</Algorithm>
      <!-- 
      Calculations done by ExternalPotential Plugin are by default based on direction of pixel copy (similarly as in chemotaxis plugin). One can however force CC3D to do
      calculations based on movement of center of mass of cell. We use "<Algorithm>PixelBased</Algorithm>" to do calculations based on center of mass movement.
      Remark:Note that in the pixel-based algorithm the typical value of pixel displacement used in calculations is of the order of 1 (pixel). But, typical displacement of center of
             mass of cell due to single pixel copy is of the order of 1/cell volume (pixels) ~ 0.1 pixel. This implies that to achieve compatible behavior of cells when using center of
             mass algorithm we need to multiply lambda’s by appropriate factor, typically of the order of 10 (p. 20, part 2).      
      -->
   </Plugin>    
  

  
   <!-- 
   <Steppable Type="PIFDumper" Frequency= "200">
      <PIFName>line</PIFName>
   </Steppable>   
   I commented out this. Steppable "PIFDumper" produces .pif files, which cannot be opened. 
        So, I will try to track the COM of cells using a code and save it as a file for every MCS.
    -->    
   
   <!-- 
   <Plugin Name="PlayerSettings">
     <Project2D XZProj="10"/> 
     <VisualControl ScreenshotFrequency="200" ScreenUpdateFrequency="10" NoOutput="false" ClosePlayerAfterSimulationDone="false" />
     <Border BorderColor="white" BorderOn="false"/>
     <Cell Type="1" Color="green"/>
     <Cell Type="2" Color="red"/>
   </Plugin>   
   -->
   
    
<!--    <Plugin Name="PlayerSettings"> -->
<!--      <Project2D XZProj="10"/>  --> -->
<!--      <VisualControl outputFrequency="200"/> -->
<!--      <VisualControl outputFrequency="200" ScreenUpdateFrequency="10" NoOutput="false" ClosePlayerAfterSimulationDone="false" />  --> -->
<!--      <Border BorderColor="white" BorderOn="false"/>  -->
<!--      <Cell Type="1" Color="green"/> -->
<!--      <Cell Type="2" Color="red"/>  -->
<!--      <Cell Type="3" Color="white"/> -->
<!--      <Cell Type="4" Color="blue"/>  -->
<!--    </Plugin>    -->
   
   <Steppable Type="PIFInitializer">      
      <PIFName>Simulation/Epithelial1.piff</PIFName>
   </Steppable> 
   
   
   <!-- 
   "UniformInitializer" tag: to specify rectangular regions of field with square (or cube in 3D) cells of user defined types (or random types).
   Box size = X * Y. This means that the box is X*Y pixels. Example: page 6 CellDraw manual.
   "Gap" tag: creates gap space between neighboring cells.
   "Width" tag: specifies the size of the initial square (cubical in 3D) generalized cells. 
            "Width = 5": box is filled with 5x5 (in pixels) cells (initially square) touching each other (Gap=0).
   "Types" tag: lists the cell types to fill the disk. The types have to be separated with ',' and there should be no spaces. 
                If one of the type names is repeated inside <Types> element, this type will get greater weighting. This means that 
                the probability of assigning this type to a cell will be greater. 
                For example <Types>psm,ncad,ncam,ncam,ncam</Types> ncam will assigned to a cell with probability 3/5 and psm and ncad with probability 1/5.
                When user specifies more than one cell type between <Types> tags then cells for this region will be initialized with types chosen 
                randomly from the provided list; example: p. 49 - Ref manual.
   -->
   <!--
   <Steppable Type="UniformInitializer">   
   <Region>
      <BoxMin x="0" y="0" z="0"/>
      <BoxMax x="50" y="50" z="1"/>
      <Gap>0</Gap> 
      <Width>5</Width>                      
      <Types>Polarized</Types>                          
   </Region>
   </Steppable>
   -->  
</CompuCell3D>
